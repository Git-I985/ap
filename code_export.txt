# процедуры и триггеры
# тесты
# скрины интерфейса
# панель администратора, для этого нужна авторизация

import sys

from PyQt5 import QtWidgets
from view.ClientsWindow import ClientsWindow
from view.ProductsWindow import ProductsWindow
from view.SuppliersWindow import SuppliersWindow
from view.UsersWindow import UsersWindow


# Trigger refresh.
# self.model.layoutChanged.emit()


class App(QtWidgets.QApplication):
    def __init__(self, *argv):
        super().__init__(*argv)

        self.productsWindow = ProductsWindow()
        self.suppliersWindow = SuppliersWindow()
        self.clientsWindow = ClientsWindow()
        self.usersWindow = UsersWindow()

        self.productsWindow.menubar.addAction(self.productsWindow.clients_action)
        self.productsWindow.menubar.addAction(self.productsWindow.suppliers_action)
        self.clientsWindow.menuBar.addAction(self.clientsWindow.products_action)
        self.clientsWindow.menuBar.addAction(self.clientsWindow.suppliers_action)
        self.suppliersWindow.menuBar.addAction(self.suppliersWindow.clients_action)
        self.suppliersWindow.menuBar.addAction(self.suppliersWindow.products_action)

        self.productsWindow.clients_action.triggered.connect(self.show_clients)
        self.productsWindow.suppliers_action.triggered.connect(self.show_suppliers)
        self.clientsWindow.products_action.triggered.connect(self.show_products)
        self.clientsWindow.suppliers_action.triggered.connect(self.show_suppliers)
        self.suppliersWindow.clients_action.triggered.connect(self.show_clients)
        self.suppliersWindow.products_action.triggered.connect(self.show_products)

        # self.productsWindow.show()
        self.usersWindow.show()

    def show_clients(self):
        self.clientsWindow.show()
        self.clientsWindow.activateWindow()

    def show_suppliers(self):
        self.suppliersWindow.show()
        self.suppliersWindow.activateWindow()

    def show_products(self):
        self.productsWindow.show()
        self.productsWindow.activateWindow()

    def show_users(self):
        self.usersWindow.show()
        self.usersWindow.activateWindow()


app = App(sys.argv)
app.exec()
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
from orm import Client


class ClientsModel(QtCore.QAbstractTableModel):
    cols = [
        'Имя клиента / организации',
        'Адрес',
        'Телефон',
        'Email',
    ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.clients = []
        self.update()

    def data(self, index, role):
        if role == Qt.DisplayRole:
            client = self.clients[index.row()]
            return [
                client.company,
                client.adress,
                client.phone,
                client.mail
            ][index.column()]

    def update(self):
        self.clients = Client.select()
        self.layoutChanged.emit()

    def rowCount(self, index):
        return len(self.clients)

    def columnCount(self, index):
        return len(self.cols)

    def headerData(self, column, orientation, role=QtCore.Qt.DisplayRole):
        if not role == QtCore.Qt.DisplayRole:
            return QtCore.QVariant()
        if orientation == QtCore.Qt.Horizontal:
            return QtCore.QVariant(self.cols[column])

    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled

    def create_client(self,
                      company,
                      adress,
                      phone,
                      mail
                      ):
        Client.create(
            company=company,
            adress=adress,
            phone=phone,
            mail=mail,
        )
        self.update()

    def delete_client(self, index):
        self.clients[index.row()].delete_instance()
        self.update()

    def update_client(self, index,
                      company,
                      adress,
                      phone,
                      mail):
        client = self.clients[index.row()]
        client.company = company
        client.adress = adress
        client.phone = phone
        client.mail = mail
        client.save()
        self.update()
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
from orm import ProductCategory


class ProductsCategoriesModel(QtCore.QAbstractListModel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.product_categories = []
        self.update()

    def data(self, index, role):
        if role == Qt.DisplayRole:
            category = self.product_categories[index.row()]
            return category.name

    def update(self):
        self.product_categories = ProductCategory.select()
        self.layoutChanged.emit()

    def add_category(self, category_name):
        ProductCategory.create(name=category_name)
        self.update()

    def delete_category(self, index):
        self.product_categories[index.row()].delete_instance()
        self.update()

    def rowCount(self, index):
        return len(self.product_categories)

    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
from peewee import fn
from orm import Product, Warehouse


class ProductsModel(QtCore.QAbstractTableModel):
    cols = [
        'название',
        'цена продажи',
        'цена закупки',
        'маржа %',
        'категория',
        'на складе',
        'ед-изм',
    ]

    def __init__(self, *args, product_model, warehouse_model, **kwargs):
        super().__init__(*args, **kwargs)
        self.products = []
        self.product_model = product_model
        self.warehouse_model = warehouse_model
        self.update()

    def data(self, index, role):
        if role == Qt.DisplayRole:
            product = self.products[index.row()]
            in_stock = Warehouse \
                .select(fn.SUM(self.warehouse_model.amount)) \
                .where(self.warehouse_model.product == product) \
                .scalar()

            return [
                product.name,
                str(product.sale_price) + 'Р',
                str(product.buy_price) + 'Р',
                str(product.margin) + '%',
                product.category.name,
                in_stock or 0,
                product.unit.name,
            ][index.column()]

    def update(self):
        self.products = self.product_model.select()
        self.layoutChanged.emit()

    def rowCount(self, index):
        return len(self.products)

    def columnCount(self, index):
        return len(self.cols)

    def headerData(self, column, orientation, role=QtCore.Qt.DisplayRole):
        if not role == QtCore.Qt.DisplayRole:
            return QtCore.QVariant()

        if orientation == QtCore.Qt.Horizontal:
            return QtCore.QVariant(self.cols[column])

    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled

    def create_product(self,
                       name,
                       category,
                       sale_price,
                       buy_price,
                       unit,
                       margin):

        self.product_model.create(
            name=name,
            category=category,
            sale_price=sale_price,
            buy_price=buy_price,
            unit=unit,
            margin=margin,
        )
        self.update()

    def delete_product(self, index):
        self.products[index.row()].delete_instance()
        self.update()

    def update_product(self,
                       index,
                       name,
                       category,
                       sale_price,
                       buy_price,
                       unit,
                       margin):
        product = self.products[index.row()]
        product.name = name
        product.category = category
        product.buy_price = buy_price
        product.sale_price = sale_price
        product.unit = unit
        product.margin = margin
        product.save()
        self.update()
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
from orm import Units


class ProductsUnitsModel(QtCore.QAbstractListModel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.product_units = []
        self.update()

    def data(self, index, role):
        if role == Qt.DisplayRole:
            unit = self.product_units[index.row()]
            return unit.name

    def update(self):
        self.product_units = Units.select()
        self.layoutChanged.emit()

    def add_unit(self, unit_name):
        Units.create(name=unit_name)
        self.update()

    def delete_product_unit(self, index):
        self.product_units[index.row()].delete_instance()
        self.update()

    def rowCount(self, index):
        return len(self.product_units)

    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
from peewee import fn
from orm import User


class UsersModel(QtCore.QAbstractTableModel):
    cols = [
        'фио',
        'логин',
        'роль'
    ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.users = []
        self.update()

    def data(self, index, role):
        if role == Qt.DisplayRole:
            user = self.users[index.row()]

            return [
                user.name,
                user.login,
                user.role.name
            ][index.column()]

    def update(self):
        self.users = User.select()
        self.layoutChanged.emit()

    def rowCount(self, index):
        return len(self.users)

    def columnCount(self, index):
        return len(self.cols)

    def headerData(self, column, orientation, role=QtCore.Qt.DisplayRole):
        if not role == QtCore.Qt.DisplayRole:
            return QtCore.QVariant()
        if orientation == QtCore.Qt.Horizontal:
            return QtCore.QVariant(self.cols[column])
from models.clients_model import ClientsModel
from models.products_categories_model import ProductsCategoriesModel
from models.products_model import ProductsModel
from models.products_units_model import ProductsUnitsModel
from models.users_model import UsersModel
from orm import Product, Warehouse

products_model = ProductsModel(product_model=Product, warehouse_model=Warehouse)
clients_model = ClientsModel()
units_model = ProductsUnitsModel()
product_categories_model = ProductsCategoriesModel()
users_model = UsersModel()
from peewee import *
from playhouse.migrate import *

# db = SqliteDatabase('app.db')
db = MySQLDatabase('alinaproj', user='root', password='root',
                   host='localhost', port=3306)


class BaseModel(Model):
    class Meta:
        database = db


class Units(BaseModel):
    name = TextField()


class Client(BaseModel):
    company = TextField()
    adress = TextField()
    phone = TextField()
    mail = TextField()


class OrderStatus(BaseModel):
    name = TextField()


class Order(BaseModel):
    client = ForeignKeyField(Client, backref='orders')
    delivery_date = DateTimeField()
    adress = TextField()
    status = ForeignKeyField(OrderStatus)


class Supplier(BaseModel):
    company = TextField()
    adress = TextField()
    phone = TextField()
    mail = TextField()


class DeliveryStatus(BaseModel):
    name = TextField()


class Delivery(BaseModel):
    supplier = ForeignKeyField(Supplier, backref='deliveries')
    date = DateTimeField()
    status = ForeignKeyField(DeliveryStatus)


class ProductCategory(BaseModel):
    name = TextField()


class Product(BaseModel):
    name = TextField()
    category = ForeignKeyField(ProductCategory)
    sale_price = DecimalField(null=True)
    buy_price = DecimalField()
    unit = ForeignKeyField(Units)
    margin = DecimalField()


class DeliveryToProduct(BaseModel):
    delivery = ForeignKeyField(Delivery)
    product = ForeignKeyField(Product)
    amount = DecimalField()


class OrderToProduct(BaseModel):
    order = ForeignKeyField(Order)
    product = ForeignKeyField(Product)
    amount = DecimalField()


class Warehouse(BaseModel):
    product = ForeignKeyField(Product, backref='in_stock')
    amount = DecimalField()


class UserRole(BaseModel):
    name = TextField()


class User(BaseModel):
    name = TextField()
    login = TextField()
    password = TextField()
    role = ForeignKeyField(UserRole)


def create_tables():
    with db:
        db.create_tables([
            Order,
            Client,
            Supplier,
            Delivery,
            DeliveryStatus,
            DeliveryToProduct,
            OrderStatus,
            OrderToProduct,
            Product,
            ProductCategory,
            Warehouse,
            Units,
            User,
            UserRole
        ])


create_tables()

# https://docs.peewee-orm.com/en/latest/peewee/playhouse.html?highlight=ALTER%20TABLE#example-usage
# migrator = SqliteMigrator(db)
# migrate(
#     # migrator.add_column('product', 'sale_price', DecimalField(null=True)),
#     # migrator.add_column('product', 'buy_price', DecimalField(null=True)),
#     migrator.add_column('product', 'unit_id', IntegerField(null=True)),
#     migrator.add_foreign_key_constraint('product', 'unit_id', ForeignKeyField(Units)),
#     # migrator.add_column('product', 'margin', DecimalField(null=True)),
# )
import unittest
from models import ProductsModel
from orm import Product, Warehouse, Units, ProductCategory
from peewee import SqliteDatabase

test_db = SqliteDatabase(':memory:')

models = [
    Product,
    Warehouse, Units, ProductCategory
]


class BaseTestCase(unittest.TestCase):
    def setUp(self):
        for model in models:
            model.bind(test_db, bind_refs=False, bind_backrefs=False)
        test_db.connect()
        test_db.create_tables(models)
        Units.create(name='Test unit')
        ProductCategory.create(name='Test category')
    
    def test_create_product(self):
        products_model = ProductsModel(product_model=Product, warehouse_model=Warehouse)
        products_model.create_product(
            name='Test product name',
            category=ProductCategory.select()[0],
            sale_price='12',
            buy_price='12',
            unit=Units.select()[0],
            margin='12',
        )
        created_product = products_model.products[0]
        self.assertEqual(1, len(products_model.products))
        self.assertEqual('Test product name', created_product.name)
        self.assertEqual('Test category', created_product.category.name)
        self.assertEqual('Test unit', created_product.unit.name)

    # def delete_product(self):
    #     raise NotImplementedError
    #
    # def update_product(self):
    #     raise NotImplementedError
    #
    # def test(self):
    #     print(products_model.products)

    def tearDown(self):
        test_db.drop_tables(models)
        test_db.close()
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/clients.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Clients(object):
    def setupUi(self, Clients):
        Clients.setObjectName("Clients")
        Clients.resize(571, 420)
        self.centralwidget = QtWidgets.QWidget(Clients)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.horizontalLayout, 2, 0, 1, 1)
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableView.setWordWrap(False)
        self.tableView.setObjectName("tableView")
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.verticalHeader().setVisible(False)
        self.tableView.verticalHeader().setHighlightSections(False)
        self.gridLayout.addWidget(self.tableView, 1, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_2.addWidget(self.lineEdit)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)
        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        Clients.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(Clients)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 571, 21))
        self.menuBar.setObjectName("menuBar")
        Clients.setMenuBar(self.menuBar)
        self.clients_action = QtWidgets.QAction(Clients)
        self.clients_action.setObjectName("clients_action")
        self.suppliers_action = QtWidgets.QAction(Clients)
        self.suppliers_action.setObjectName("suppliers_action")
        self.products_action = QtWidgets.QAction(Clients)
        self.products_action.setObjectName("products_action")

        self.retranslateUi(Clients)
        QtCore.QMetaObject.connectSlotsByName(Clients)

    def retranslateUi(self, Clients):
        _translate = QtCore.QCoreApplication.translate
        Clients.setWindowTitle(_translate("Clients", "Клиенты"))
        self.pushButton_3.setText(_translate("Clients", "Изменить данные клиента"))
        self.pushButton_2.setText(_translate("Clients", "Удалить клиента"))
        self.pushButton.setText(_translate("Clients", "Добавить клиента"))
        self.pushButton_4.setText(_translate("Clients", "Найти"))
        self.clients_action.setText(_translate("Clients", "Клиенты"))
        self.suppliers_action.setText(_translate("Clients", "Поставщики"))
        self.products_action.setText(_translate("Clients", "Продукты"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/createupdateclient.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_CreateUpdateClient(object):
    def setupUi(self, CreateUpdateClient):
        CreateUpdateClient.setObjectName("CreateUpdateClient")
        CreateUpdateClient.resize(662, 265)
        self.centralwidget = QtWidgets.QWidget(CreateUpdateClient)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout.addWidget(self.lineEdit_3)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout.addWidget(self.lineEdit_4)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        CreateUpdateClient.setCentralWidget(self.centralwidget)

        self.retranslateUi(CreateUpdateClient)
        QtCore.QMetaObject.connectSlotsByName(CreateUpdateClient)

    def retranslateUi(self, CreateUpdateClient):
        _translate = QtCore.QCoreApplication.translate
        CreateUpdateClient.setWindowTitle(_translate("CreateUpdateClient", "Создать клиента"))
        self.label.setText(_translate("CreateUpdateClient", "Компания"))
        self.label_2.setText(_translate("CreateUpdateClient", "Адрес"))
        self.label_3.setText(_translate("CreateUpdateClient", "Телефон"))
        self.label_4.setText(_translate("CreateUpdateClient", "Email"))
        self.pushButton.setText(_translate("CreateUpdateClient", "Создать клиента"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/createupdatesupplier.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_CreateUpdateSupplier(object):
    def setupUi(self, CreateUpdateSupplier):
        CreateUpdateSupplier.setObjectName("CreateUpdateSupplier")
        CreateUpdateSupplier.resize(567, 265)
        self.centralwidget = QtWidgets.QWidget(CreateUpdateSupplier)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout.addWidget(self.lineEdit_3)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout.addWidget(self.lineEdit_4)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        CreateUpdateSupplier.setCentralWidget(self.centralwidget)

        self.retranslateUi(CreateUpdateSupplier)
        QtCore.QMetaObject.connectSlotsByName(CreateUpdateSupplier)

    def retranslateUi(self, CreateUpdateSupplier):
        _translate = QtCore.QCoreApplication.translate
        CreateUpdateSupplier.setWindowTitle(_translate("CreateUpdateSupplier", "Создать поставщика"))
        self.label.setText(_translate("CreateUpdateSupplier", "Компания"))
        self.label_2.setText(_translate("CreateUpdateSupplier", "Адрес"))
        self.label_3.setText(_translate("CreateUpdateSupplier", "Телефон"))
        self.label_4.setText(_translate("CreateUpdateSupplier", "Email"))
        self.pushButton.setText(_translate("CreateUpdateSupplier", "Создать поставщика"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/deliveries.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(486, 416)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 486, 21))
        self.menuBar.setObjectName("menuBar")
        MainWindow.setMenuBar(self.menuBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Поставки"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/delivery.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(605, 417)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 605, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Поставка"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 350)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TestTitles123123123"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/order.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(485, 493)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 485, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Заказ"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/orders.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(482, 417)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 482, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Заказы"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/products.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(526, 542)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.horizontalLayout_2, 6, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.gridLayout.addLayout(self.horizontalLayout, 3, 0, 1, 1)
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableView.setWordWrap(False)
        self.tableView.setObjectName("tableView")
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.verticalHeader().setVisible(False)
        self.tableView.verticalHeader().setHighlightSections(False)
        self.tableView.verticalHeader().setStretchLastSection(False)
        self.gridLayout.addWidget(self.tableView, 4, 0, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 526, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.clients_action = QtWidgets.QAction(MainWindow)
        self.clients_action.setObjectName("clients_action")
        self.suppliers_action = QtWidgets.QAction(MainWindow)
        self.suppliers_action.setObjectName("suppliers_action")
        self.products_action = QtWidgets.QAction(MainWindow)
        self.products_action.setObjectName("products_action")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Продукты"))
        self.pushButton_5.setText(_translate("MainWindow", "Изменить категории продуктов"))
        self.pushButton_4.setText(_translate("MainWindow", "Изменить продукт"))
        self.pushButton_3.setText(_translate("MainWindow", "Удалить продукт"))
        self.pushButton.setText(_translate("MainWindow", "Добавить продукт"))
        self.pushButton_2.setText(_translate("MainWindow", "Найти продукт"))
        self.clients_action.setText(_translate("MainWindow", "Клиенты"))
        self.suppliers_action.setText(_translate("MainWindow", "Поставщики"))
        self.products_action.setText(_translate("MainWindow", "Продукты"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/suppliers.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Suppliers(object):
    def setupUi(self, Suppliers):
        Suppliers.setObjectName("Suppliers")
        Suppliers.resize(566, 414)
        self.centralwidget = QtWidgets.QWidget(Suppliers)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setObjectName("tableView")
        self.gridLayout.addWidget(self.tableView, 1, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.horizontalLayout_2, 2, 0, 1, 1)
        Suppliers.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(Suppliers)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 566, 21))
        self.menuBar.setObjectName("menuBar")
        Suppliers.setMenuBar(self.menuBar)
        self.clients_action = QtWidgets.QAction(Suppliers)
        self.clients_action.setObjectName("clients_action")
        self.suppliers_action = QtWidgets.QAction(Suppliers)
        self.suppliers_action.setObjectName("suppliers_action")
        self.products_action = QtWidgets.QAction(Suppliers)
        self.products_action.setObjectName("products_action")

        self.retranslateUi(Suppliers)
        QtCore.QMetaObject.connectSlotsByName(Suppliers)

    def retranslateUi(self, Suppliers):
        _translate = QtCore.QCoreApplication.translate
        Suppliers.setWindowTitle(_translate("Suppliers", "Поставщики"))
        self.pushButton_4.setText(_translate("Suppliers", "Найти"))
        self.pushButton_2.setText(_translate("Suppliers", "Изменить данные поставщика"))
        self.pushButton_3.setText(_translate("Suppliers", "Удалить поставщика"))
        self.pushButton.setText(_translate("Suppliers", "Добавить поставщика"))
        self.clients_action.setText(_translate("Suppliers", "Клиенты"))
        self.suppliers_action.setText(_translate("Suppliers", "Поставщики"))
        self.products_action.setText(_translate("Suppliers", "Продукты"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(681, 458)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 681, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TestTitles123123123"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/updateproduct.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_CreateUpdateProductWIndow(object):
    def setupUi(self, CreateUpdateProductWIndow):
        CreateUpdateProductWIndow.setObjectName("CreateUpdateProductWIndow")
        CreateUpdateProductWIndow.resize(571, 483)
        self.centralwidget = QtWidgets.QWidget(CreateUpdateProductWIndow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.verticalLayout.addWidget(self.comboBox)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout.addWidget(self.lineEdit_3)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setObjectName("comboBox_2")
        self.verticalLayout.addWidget(self.comboBox_2)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.verticalLayout.addWidget(self.label_6)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout.addWidget(self.lineEdit_4)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        CreateUpdateProductWIndow.setCentralWidget(self.centralwidget)

        self.retranslateUi(CreateUpdateProductWIndow)
        QtCore.QMetaObject.connectSlotsByName(CreateUpdateProductWIndow)

    def retranslateUi(self, CreateUpdateProductWIndow):
        _translate = QtCore.QCoreApplication.translate
        CreateUpdateProductWIndow.setWindowTitle(_translate("CreateUpdateProductWIndow", "Изменить/Добавить продукты"))
        self.label.setText(_translate("CreateUpdateProductWIndow", "Название"))
        self.label_2.setText(_translate("CreateUpdateProductWIndow", "Категория"))
        self.label_3.setText(_translate("CreateUpdateProductWIndow", "Цена закупки"))
        self.label_4.setText(_translate("CreateUpdateProductWIndow", "Цена продажи"))
        self.label_5.setText(_translate("CreateUpdateProductWIndow", "Ед-изм"))
        self.label_6.setText(_translate("CreateUpdateProductWIndow", "Наценка"))
        self.pushButton.setText(_translate("CreateUpdateProductWIndow", "Сохранить"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/updateproductcategories.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_UpdateProductsCategories(object):
    def setupUi(self, UpdateProductsCategories):
        UpdateProductsCategories.setObjectName("UpdateProductsCategories")
        UpdateProductsCategories.resize(562, 494)
        self.centralwidget = QtWidgets.QWidget(UpdateProductsCategories)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setObjectName("listView")
        self.gridLayout.addWidget(self.listView, 1, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        UpdateProductsCategories.setCentralWidget(self.centralwidget)

        self.retranslateUi(UpdateProductsCategories)
        QtCore.QMetaObject.connectSlotsByName(UpdateProductsCategories)

    def retranslateUi(self, UpdateProductsCategories):
        _translate = QtCore.QCoreApplication.translate
        UpdateProductsCategories.setWindowTitle(_translate("UpdateProductsCategories", "Категории продуктов"))
        self.pushButton.setText(_translate("UpdateProductsCategories", "Добавить"))
        self.pushButton_2.setText(_translate("UpdateProductsCategories", "Удалить"))
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/users.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(780, 485)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableView.setObjectName("tableView")
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.verticalHeader().setVisible(False)
        self.tableView.verticalHeader().setHighlightSections(False)
        self.gridLayout.addWidget(self.tableView, 1, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.gridLayout.addLayout(self.horizontalLayout, 2, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_2.addWidget(self.lineEdit)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_2.addWidget(self.pushButton_5)
        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 780, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Пользователи"))
        self.pushButton_4.setText(_translate("MainWindow", "Изменить роли"))
        self.pushButton_3.setText(_translate("MainWindow", "Изменить данные пользователя"))
        self.pushButton.setText(_translate("MainWindow", "Удалить пользователя"))
        self.pushButton_2.setText(_translate("MainWindow", "Добавить пользователя"))
        self.pushButton_5.setText(_translate("MainWindow", "Найти"))
from PyQt5 import QtWidgets
from models import clients_model
from view.CreateUpdateClientWindow import CreateUpdateClientWindow
from uic.clients import Ui_Clients


class ClientsWindow(QtWidgets.QMainWindow, Ui_Clients):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_Clients, self).__init__()
        self.setupUi(self)

        self.createUpdateClientWindow = CreateUpdateClientWindow()
        self.pushButton.clicked.connect(lambda x: self.createUpdateClientWindow.show())
        self.pushButton_2.clicked.connect(self.delete_client)
        self.pushButton_3.clicked.connect(self.update_client)
        self.tableView.setModel(clients_model)
        self.tableView.resizeColumnsToContents()

    def delete_client(self):
        indexes = self.tableView.selectedIndexes()
        if len(indexes) == 0:
            return
        clients_model.delete_client(indexes[0])

    def update_client(self):
        indexes = self.tableView.selectedIndexes()
        if len(indexes) == 0:
            return
        self.createUpdateClientWindow.show()
        self.createUpdateClientWindow.load_client(indexes[0])
from PyQt5 import QtWidgets, QtGui
from models import clients_model
from uic.createupdateclient import Ui_CreateUpdateClient


class CreateUpdateClientWindow(QtWidgets.QMainWindow, Ui_CreateUpdateClient):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_CreateUpdateClient, self).__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.on_click)
        self.update_index = None

    def on_click(self):
        if self.update_index:
            self.update_client(self.update_index)
        else:
            self.create_client()

    def create_client(self):
        clients_model.create_client(
            company=self.lineEdit.text(),
            adress=self.lineEdit_2.text(),
            phone=self.lineEdit_3.text(),
            mail=self.lineEdit_4.text()
        )
        self.close()

    def update_client(self, index):
        clients_model.update_client(
            index,
            company=self.lineEdit.text(),
            adress=self.lineEdit_2.text(),
            phone=self.lineEdit_3.text(),
            mail=self.lineEdit_4.text()
        )
        self.close()
        self.update_index = None

    def load_client(self, index):
        self.update_index = index
        self.pushButton.setText('Изменить данные клиента')
        self.setWindowTitle('Изменить данные клиента')

        client = clients_model.clients[index.row()]

        self.lineEdit.setText(client.company)
        self.lineEdit_2.setText(client.adress)
        self.lineEdit_3.setText(client.phone)
        self.lineEdit_4.setText(client.mail)

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        self.lineEdit.clear()
        self.lineEdit_2.clear()
        self.lineEdit_3.clear()
        self.lineEdit_4.clear()
        self.pushButton.setText('Сохранить')
        self.setWindowTitle('Добавить клиента')
from PyQt5 import QtWidgets
from uic.createupdatesupplier import Ui_CreateUpdateSupplier


class CreateUpdateSuppliersWindow(QtWidgets.QMainWindow, Ui_CreateUpdateSupplier):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_CreateUpdateSupplier, self).__init__()
        self.setupUi(self)
from PyQt5 import QtWidgets
from models import products_model
from view.UpdateProductsCategoriesWindow import UpdateProductsCategoriesWindow
from uic.products import Ui_MainWindow
from view.UpdateProductsWindow import UpdateProductsWindow


class ProductsWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.tableView.setModel(products_model)
        self.tableView.resizeColumnsToContents()
        self.pushButton_3.clicked.connect(self.delete_product)
        self.createUpdateProductsWindow = UpdateProductsWindow()
        self.updateProductsCategoriesWindow = UpdateProductsCategoriesWindow()

        self.pushButton.clicked.connect(lambda x: self.createUpdateProductsWindow.show())
        self.pushButton_5.clicked.connect(lambda x: self.updateProductsCategoriesWindow.show())
        self.pushButton_4.clicked.connect(self.update_product)

    def delete_product(self):
        indexes = self.tableView.selectedIndexes()
        if len(indexes) == 0:
            return
        products_model.delete_product(indexes[0])

    def update_product(self):
        indexes = self.tableView.selectedIndexes()
        if len(indexes) == 0:
            return
        self.createUpdateProductsWindow.show()
        self.createUpdateProductsWindow.load_product(indexes[0])
from PyQt5 import QtWidgets
from view.CreateUpdateSuppliersWindow import CreateUpdateSuppliersWindow
from uic.suppliers import Ui_Suppliers


class SuppliersWindow(QtWidgets.QMainWindow, Ui_Suppliers):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_Suppliers, self).__init__()
        self.setupUi(self)
        self.createUpdateSuppliersWindow = CreateUpdateSuppliersWindow()

        self.pushButton.clicked.connect(lambda x: self.createUpdateSuppliersWindow.show())
from PyQt5 import QtWidgets
from models import product_categories_model
from uic.updateproductcategories import Ui_UpdateProductsCategories


class UpdateProductsCategoriesWindow(QtWidgets.QMainWindow, Ui_UpdateProductsCategories):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_UpdateProductsCategories, self).__init__()
        self.setupUi(self)
        self.listView.setModel(product_categories_model)
        self.pushButton.clicked.connect(self.add_category)
        self.pushButton_2.clicked.connect(self.delete_category)

    def add_category(self):
        category = self.lineEdit.text()
        if not len(category):
            return
        product_categories_model.add_category(category)
        self.lineEdit.setText("")

    def update_category(self):
        # print(self.lineEdit.text)
        pass

    def delete_category(self):
        product_categories_model.delete_category(self.listView.selectedIndexes()[0])
from PyQt5 import QtWidgets, QtGui
from models import product_categories_model, units_model, products_model
from uic.updateproduct import Ui_CreateUpdateProductWIndow


class UpdateProductsWindow(QtWidgets.QMainWindow, Ui_CreateUpdateProductWIndow):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_CreateUpdateProductWIndow, self).__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.on_click)
        self.comboBox.setModel(product_categories_model)
        self.comboBox_2.setModel(units_model)
        self.update_index = None

    def on_click(self):
        if self.update_index:
            self.update_product(self.update_index)
        else:
            self.create_product()

    def create_product(self):
        products_model.create_product(
            name=self.lineEdit.text(),
            category=product_categories_model.product_categories[self.comboBox.currentIndex()],
            buy_price=self.lineEdit_2.text(),
            sale_price=self.lineEdit_3.text(),
            unit=units_model.product_units[self.comboBox_2.currentIndex()],
            margin=self.lineEdit_4.text()
        )
        self.close()

    def update_product(self, index):
        products_model.update_product(
            index,
            name=self.lineEdit.text(),
            category=product_categories_model.product_categories[self.comboBox.currentIndex()],
            buy_price=self.lineEdit_2.text(),
            sale_price=self.lineEdit_3.text(),
            unit=units_model.product_units[self.comboBox_2.currentIndex()],
            margin=self.lineEdit_4.text()
        )
        self.close()
        self.update_index = None

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        self.lineEdit.clear()
        self.comboBox.setCurrentIndex(0)
        self.lineEdit_2.clear()
        self.lineEdit_3.clear()
        self.comboBox_2.setCurrentIndex(0)
        self.lineEdit_4.clear()
        self.pushButton.setText('Сохранить')
        self.setWindowTitle('Добавить новый продукт')

    def load_product(self, index):
        self.update_index = index
        self.pushButton.setText('Изменить продукт')
        self.setWindowTitle('Изменить продукт')

        product = products_model.products[index.row()]
        self.lineEdit.setText(product.name)
        self.comboBox.setCurrentIndex(list(product_categories_model.product_categories).index(product.category))
        self.lineEdit_2.setText(str(product.buy_price))
        self.lineEdit_3.setText(str(product.sale_price))
        self.comboBox_2.setCurrentIndex(list(units_model.product_units).index(product.unit))
        self.lineEdit_4.setText(str(product.margin))
        pass
from PyQt5 import QtWidgets
from models import users_model
from uic.users import Ui_MainWindow


class UsersWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *argv):
        super(QtWidgets.QMainWindow, self).__init__(*argv)
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.tableView.setModel(users_model)
        self.tableView.resizeColumnsToContents()

        # self.createUpdateClientWindow = CreateUpdateClientWindow()
        # self.pushButton.clicked.connect(lambda x: self.createUpdateClientWindow.show())
        # self.pushButton_2.clicked.connect(self.delete_client)
        # self.pushButton_3.clicked.connect(self.update_client)
        # self.tableView.resizeColumnsToContents()
